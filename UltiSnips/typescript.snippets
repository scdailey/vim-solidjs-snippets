#=================================================================================================
# JSX

snippet sinput "Input two-way binding" b
<input type="${1:text}" value={${2:value}()} onInput={e => ${3:setValue}(e.currentTarget.value)}/>
endsnippet

#=================================================================================================
# Components

snippet scomp "Solid empty function component" b
const ${1:`!v expand('%:t:r')`}: Component<{$2}> = (props) => {
  $0
  return <div>$1</div>;
};
endsnippet

snippet spcomp "Solid empty Parent Component" b
const ${1:`!v expand('%:t:r')`}: ParentComponent<{$2}> = (props) => {
  $0
  return <div>{props.children}</div>;
};
endsnippet

snippet sfcomp "Solid empty Flow Component" b
const ${1:`!v expand('%:t:r')`}: FlowComponent<{$2}, ${3:JSX.Element}> = (props) => {
  $0
  return <div>{props.children}</div>;
};
endsnippet

snippet svcomp "Solid empty Void Component" b
const ${1:`!v expand('%:t:r')`}: VoidComponent<{$2}> = (props) => {
  $0
  return <div></div>;
};
endsnippet

snippet scompi "Solid empty function component with imports" b
import { Component } from "solid-js";

const ${1:`!v expand('%:t:r')`}: Component<{$2}> = (props) => {
  $0
  return <div></div>;
};
endsnippet

snippet scompie "Solid empty function component with imports and default export" b
import { Component } from "solid-js";

const ${1:`!v expand('%:t:r')`}: Component<{$2}> = (props) => {
  $0
  return <div></div>;
};

export default $1;
endsnippet

snippet spcompi "Solid empty Parent Component with imports" b
import { ParentComponent } from "solid-js";

const ${1:`!v expand('%:t:r')`}: ParentComponent<{$2}> = (props) => {
  $0
  return <div>{props.children}</div>;
};
endsnippet

snippet sfcompi "Solid empty Flow Component with imports" b
import { FlowComponent, JSX } from "solid-js";

const ${1:`!v expand('%:t:r')`}: FlowComponent<{$2}, ${3:JSX.Element}> = (props) => {
  $0
  return <div>{props.children}</div>;
};
endsnippet

snippet svcompi "Solid empty void component with imports" b
import { FlowComponent, JSX } from "solid-js";

const ${1:`!v expand('%:t:r')`}: FlowComponent<{$2}, ${3:JSX.Element}> = (props) => {
  $0
  return <div>{props.children}</div>;
};
endsnippet

snippet shtmlcomp "Component extending an HTML element" b
const ${1:`!v expand('%:t:r')`}: ParentComponent<
  ComponentProps<"${2:div}"> & {
    $0
  }
> = (props) => {
  const [local, attrs] = splitProps(props, []);

  return <${2:div} {...attrs}>{props.children}</${2:div}>;
};
endsnippet

snippet shtmlcompi "Component extending an HTML element with imports"
import { ParentComponent, splitProps, ComponentProps } from "solid-js";

const ${1:`!v expand('%:t:r')`}: ParentComponent<
  ComponentProps<"${2:div}"> & {
    $0
  }
> = (props) => {
  const [local, attrs] = splitProps(props, []);

  return <${2:div} {...attrs}>{props.children}</${2:div}>;
};
endsnippet

#=================================================================================================
# Context

snippet sctxp "Solid Context Provider component" b
import { createContext, useContext, ParentComponent } from "solid-js";
import { createStore } from "solid-js/store";

const defaultState = {};

const ${1:`!v expand('%:t:r')`}Context = createContext<[state: typeof defaultState, actions: {}]>([
  defaultState,
  {},
]);

export const $1Provider: ParentComponent = (props) => {
  const [state, setState] = createStore(defaultState);

  return (
    <$1Context.Provider value={[state, {}]}>
      {props.children}
    </$1Context.Provider>
  );
};

export const use$1 = () => useContext($1Context);
endsnippet

#=================================================================================================
# Reactivity

snippet ssig "Simple createSignal" b
const [${1:state}, set${1/\w+/\u$0/g}] = createSignal($2);
endsnippet

snippet seff "Simple createEffect" b
createEffect(() => {
	const value = ${1:source}();
	$0
});
endsnippet

snippet seffon "createEffect with explicit sources" b
createEffect(on(${1:source}, (value, prev) => {
	$0
}));
endsnippet

snippet smemo "Simple createMemo" b
const ${1:value} = createMemo(() => $0);
endsnippet

snippet smemoon "createMemo with explicit sources" b
const ${1:value} = createMemo(on(${2:value}, (value, prev) => $0));
endsnippet
